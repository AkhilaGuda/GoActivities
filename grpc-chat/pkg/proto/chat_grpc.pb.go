// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/proto/chat.proto

package grpcchat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CHAT_PrivateSend_FullMethodName  = "/chat.CHAT/PrivateSend"
	CHAT_JoinChatRoom_FullMethodName = "/chat.CHAT/JoinChatRoom"
	CHAT_BidiChatRoom_FullMethodName = "/chat.CHAT/BidiChatRoom"
)

// CHATClient is the client API for CHAT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CHATClient interface {
	PrivateSend(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	JoinChatRoom(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	BidiChatRoom(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error)
}

type cHATClient struct {
	cc grpc.ClientConnInterface
}

func NewCHATClient(cc grpc.ClientConnInterface) CHATClient {
	return &cHATClient{cc}
}

func (c *cHATClient) PrivateSend(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, CHAT_PrivateSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cHATClient) JoinChatRoom(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CHAT_ServiceDesc.Streams[0], CHAT_JoinChatRoom_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinRequest, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CHAT_JoinChatRoomClient = grpc.ServerStreamingClient[ChatMessage]

func (c *cHATClient) BidiChatRoom(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CHAT_ServiceDesc.Streams[1], CHAT_BidiChatRoom_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CHAT_BidiChatRoomClient = grpc.BidiStreamingClient[ChatMessage, ChatMessage]

// CHATServer is the server API for CHAT service.
// All implementations must embed UnimplementedCHATServer
// for forward compatibility.
type CHATServer interface {
	PrivateSend(context.Context, *MessageRequest) (*MessageResponse, error)
	JoinChatRoom(*JoinRequest, grpc.ServerStreamingServer[ChatMessage]) error
	BidiChatRoom(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error
	mustEmbedUnimplementedCHATServer()
}

// UnimplementedCHATServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCHATServer struct{}

func (UnimplementedCHATServer) PrivateSend(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateSend not implemented")
}
func (UnimplementedCHATServer) JoinChatRoom(*JoinRequest, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method JoinChatRoom not implemented")
}
func (UnimplementedCHATServer) BidiChatRoom(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method BidiChatRoom not implemented")
}
func (UnimplementedCHATServer) mustEmbedUnimplementedCHATServer() {}
func (UnimplementedCHATServer) testEmbeddedByValue()              {}

// UnsafeCHATServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CHATServer will
// result in compilation errors.
type UnsafeCHATServer interface {
	mustEmbedUnimplementedCHATServer()
}

func RegisterCHATServer(s grpc.ServiceRegistrar, srv CHATServer) {
	// If the following call pancis, it indicates UnimplementedCHATServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CHAT_ServiceDesc, srv)
}

func _CHAT_PrivateSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CHATServer).PrivateSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CHAT_PrivateSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CHATServer).PrivateSend(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CHAT_JoinChatRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CHATServer).JoinChatRoom(m, &grpc.GenericServerStream[JoinRequest, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CHAT_JoinChatRoomServer = grpc.ServerStreamingServer[ChatMessage]

func _CHAT_BidiChatRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CHATServer).BidiChatRoom(&grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CHAT_BidiChatRoomServer = grpc.BidiStreamingServer[ChatMessage, ChatMessage]

// CHAT_ServiceDesc is the grpc.ServiceDesc for CHAT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CHAT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.CHAT",
	HandlerType: (*CHATServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrivateSend",
			Handler:    _CHAT_PrivateSend_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinChatRoom",
			Handler:       _CHAT_JoinChatRoom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiChatRoom",
			Handler:       _CHAT_BidiChatRoom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/chat.proto",
}
